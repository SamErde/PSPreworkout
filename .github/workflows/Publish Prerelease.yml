name: üè∑Ô∏è Publish Prerelease Version
# Publish a prerelease version if the module manifest contains a Prerelease tag value.
# The logic to check the prerelease tag value was generated by ChatGPT and not validated yet.
on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:

  check-prerelease:
    name: Check Prerelease Tag
    runs-on: ubuntu-latest

    outputs:
      has_prerelease: ${{ steps.check_prerelease.outputs.has_prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for Prerelease Tag in .psd1
        id: check_prerelease
        run: |
          # Define the manifest file path
          manifest_file="./${GITHUB_REPOSITORY}/src/${GITHUB_REPOSITORY}/${GITHUB_REPOSITORY}.psd1"

          # Extract the Prerelease tag from the manifest
          prerelease_tag=$(grep 'Prerelease' "$manifest_file" | awk -F'"' '{print $2}')

          # Check if the prerelease tag is non-empty
          if [[ -n "$prerelease_tag" ]]; then
            echo "Prerelease tag found: $prerelease_tag"
            echo "::set-output name=has_prerelease::true"
          else
            echo "No prerelease tag found."
            echo "::set-output name=has_prerelease::false"
          fi

  prerelease:
    name: üöÄ Release and Publish
    runs-on: ubuntu-latest
    needs: check-prerelease  # Waits for the 'check-prerelease' job to complete
    if: needs.check-prerelease.outputs.has_prerelease == 'true'  # Conditional execution

    steps:

      - name: ‚úÖ Checkout
        uses: actions/checkout@v4

      - name: üì¶ Create GitHub Release
        # Creates a new release from a changelog section that matches a commit tag (eg: v1.2.5)
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          args: |
            artifacts\\${{ GitHub.repository }}.zip

      - name: üöÄ Publish PowerShell Module
        env:
          PS_GALLERY_KEY: ${{ secrets.POWERSHELLGALLERY_KEY }}
        shell: pwsh
        run: |
          echo ${env:PATH}
          $PSVersionTable
          Publish-Module -Path '.\src\PSPreworkout' -NuGetApiKey ${{ secrets.POWERSHELLGALLERY_KEY }}

  skip-on-no-prerelease:
    name: Skip on No Prerelease
    runs-on: ubuntu-latest
    needs: check-prerelease  # Waits for the 'check-prerelease' job to complete
    if: needs.check-prerelease.outputs.has_prerelease == 'false'  # Conditional execution

    steps:
      - name: Skip Workflow Steps
        run: |
          echo "No prerelease tag found. Skipping release."
