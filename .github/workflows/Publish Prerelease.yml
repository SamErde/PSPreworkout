name: üè∑Ô∏è Publish Prerelease Version
# Publish a prerelease version when a pull request is merged into the 'prerelease' branch.
# This workflow automatically increments the version with a prerelease suffix and publishes to PowerShell Gallery.

on:
  push:
    branches:
      - prerelease
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prerelease:
    name: üöÄ Build and Publish Prerelease
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ü•æ Bootstrap Dependencies
        shell: pwsh
        run: |
          try {
            Write-Host "Bootstrapping build dependencies..." -ForegroundColor Cyan
            
            # Ensure PSGallery is available and trusted
            if (-not (Get-PSRepository -Name PSGallery -ErrorAction SilentlyContinue)) {
              Write-Host "Registering PSGallery repository..." -ForegroundColor Yellow
              Register-PSRepository -Default
            }
            
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            Write-Host "PSGallery repository configured" -ForegroundColor Green
            
            # Run the bootstrap script
            if (Test-Path ".\src\actions_bootstrap.ps1") {
              .\src\actions_bootstrap.ps1
            } else {
              Write-Warning "Bootstrap script not found, installing dependencies manually..."
              
              # Install required modules manually
              $modules = @(
                @{Name = 'Pester'; Version = '5.6.1'},
                @{Name = 'InvokeBuild'; Version = '5.11.3'},
                @{Name = 'PSScriptAnalyzer'; Version = '1.22.0'},
                @{Name = 'platyPS'; Version = '0.12.0'}
              )
              
              foreach ($module in $modules) {
                Write-Host "Installing $($module.Name) version $($module.Version)..." -ForegroundColor Yellow
                Install-Module -Name $module.Name -RequiredVersion $module.Version -Force -SkipPublisherCheck
              }
            }
            
            Write-Host "Bootstrap completed successfully!" -ForegroundColor Green
            
          } catch {
            Write-Error "Bootstrap failed: $($_.Exception.Message)"
            throw
          }

      - name: üîß Generate Prerelease Version
        id: version
        shell: pwsh
        run: |
          try {
            # Read current version from manifest
            $manifestPath = ".\src\PSPreworkout\PSPreworkout.psd1"
            if (-not (Test-Path $manifestPath)) {
              throw "Module manifest not found at: $manifestPath"
            }
            
            $manifest = Import-PowerShellDataFile -Path $manifestPath
            $currentVersion = $manifest.ModuleVersion
            
            Write-Host "Current version: $currentVersion" -ForegroundColor Green
            
            # Generate prerelease suffix with timestamp
            $timestamp = Get-Date -Format "yyyyMMddHHmm"
            $prereleaseVersion = "$currentVersion-preview.$timestamp"
            
            Write-Host "Prerelease version: $prereleaseVersion" -ForegroundColor Yellow
            
            # Update manifest with prerelease version
            $manifestContent = Get-Content -Path $manifestPath -Raw
            
            # Update the Prerelease field - look for commented line
            if ($manifestContent -match '#\s*Prerelease\s*=\s*[^#\r\n]*') {
              $manifestContent = $manifestContent -replace '#\s*Prerelease\s*=\s*[^#\r\n]*', "Prerelease = 'preview.$timestamp'"
              Write-Host "Updated commented Prerelease line" -ForegroundColor Green
            } elseif ($manifestContent -match "Prerelease\s*=\s*'[^']*'") {
              $manifestContent = $manifestContent -replace "Prerelease\s*=\s*'[^']*'", "Prerelease = 'preview.$timestamp'"
              Write-Host "Updated existing Prerelease line" -ForegroundColor Green
            } else {
              # Add Prerelease field after the comment
              $manifestContent = $manifestContent -replace "(# Prerelease string of this module)", "`$1`n            Prerelease = 'preview.$timestamp'"
              Write-Host "Added new Prerelease line" -ForegroundColor Green
            }
            
            # Save updated manifest
            Set-Content -Path $manifestPath -Value $manifestContent -Encoding UTF8
            
            # Verify the change by parsing the updated manifest
            $updatedManifest = Import-PowerShellDataFile -Path $manifestPath
            $actualPrerelease = $updatedManifest.PrivateData.PSData.Prerelease
            
            if ($actualPrerelease -eq "preview.$timestamp") {
              Write-Host "Successfully updated manifest prerelease: $actualPrerelease" -ForegroundColor Green
            } else {
              throw "Failed to update prerelease field. Expected: 'preview.$timestamp', Got: '$actualPrerelease'"
            }
            
            # Set outputs for later steps
            "PRERELEASE_VERSION=$prereleaseVersion" >> $env:GITHUB_OUTPUT
            "BASE_VERSION=$currentVersion" >> $env:GITHUB_OUTPUT
            "PRERELEASE_SUFFIX=preview.$timestamp" >> $env:GITHUB_OUTPUT
            
          } catch {
            Write-Error "Failed to generate prerelease version: $($_.Exception.Message)"
            throw
          }

      - name: üë∑‚Äç‚ôÇÔ∏è Build Module
        shell: pwsh
        run: |
          try {
            Write-Host "Building module..." -ForegroundColor Cyan
            
            # Run the build process
            Invoke-Build -File .\src\PSPreworkout.build.ps1 -Task 'Clean', 'Build'
            
            # Verify the build output exists
            $artifactsPath = ".\src\Artifacts\PSPreworkout"
            if (-not (Test-Path $artifactsPath)) {
              throw "Build artifacts not found at expected path: $artifactsPath"
            }
            
            # Check if manifest exists in artifacts
            $builtManifestPath = Join-Path $artifactsPath "PSPreworkout.psd1"
            if (-not (Test-Path $builtManifestPath)) {
              throw "Built manifest not found at: $builtManifestPath"
            }
            
            Write-Host "Module build completed successfully!" -ForegroundColor Green
            Write-Host "Build artifacts located at: $artifactsPath" -ForegroundColor Green
            
          } catch {
            Write-Error "Module build failed: $($_.Exception.Message)"
            throw
          }

      - name: üß™ Test Module
        shell: pwsh
        run: |
          try {
            Write-Host "Running module tests..." -ForegroundColor Cyan
            
            # Test the built module
            $modulePath = ".\src\Artifacts\PSPreworkout"
            
            if (-not (Test-Path $modulePath)) {
              throw "Built module not found at expected path: $modulePath"
            }
            
            # Import and test the module
            Import-Module $modulePath -Force
            $moduleInfo = Get-Module PSPreworkout
            
            if (-not $moduleInfo) {
              throw "Failed to import PSPreworkout module"
            }
            
            Write-Host "Module imported successfully. Version: $($moduleInfo.Version)" -ForegroundColor Green
            
            # Verify prerelease version is set correctly
            $manifestPath = Join-Path $modulePath "PSPreworkout.psd1"
            $manifest = Import-PowerShellDataFile -Path $manifestPath
            $prereleaseValue = $manifest.PrivateData.PSData.Prerelease
            
            if (-not $prereleaseValue) {
              throw "Prerelease value not found in built manifest"
            }
            
            if ($prereleaseValue -notmatch '^preview\.\d{12}$') {
              throw "Invalid prerelease format: $prereleaseValue"
            }
            
            Write-Host "Prerelease version validated: $prereleaseValue" -ForegroundColor Green
            
            # Basic validation - check some key functions exist
            $commands = Get-Command -Module PSPreworkout
            $expectedCommands = @('Get-ModulesWithUpdate', 'Update-AllTheThings', 'Test-IsElevated')
            
            foreach ($cmd in $expectedCommands) {
              if ($cmd -notin $commands.Name) {
                throw "Expected command '$cmd' not found in module"
              }
            }
            
            Write-Host "Found $($commands.Count) commands in module" -ForegroundColor Green
            Write-Host "Module validation completed successfully!" -ForegroundColor Green
            
          } catch {
            Write-Error "Module testing failed: $($_.Exception.Message)"
            throw
          }

      - name: üöÄ Publish to PowerShell Gallery
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.POWERSHELLGALLERY_KEY }}
        run: |
          try {
            Write-Host "Publishing prerelease module to PowerShell Gallery..." -ForegroundColor Cyan
            
            # Verify API key is available
            if (-not $env:NUGET_API_KEY) {
              throw "PowerShell Gallery API key not found in secrets"
            }
            
            # Set repository as trusted
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            
            # Publish the module with prerelease support
            $publishParams = @{
              Path = '.\src\Artifacts\PSPreworkout'
              NuGetApiKey = $env:NUGET_API_KEY
              Repository = 'PSGallery'
              Force = $true
              AllowPrerelease = $true
              Verbose = $true
            }
            
            Write-Host "Publishing with parameters:" -ForegroundColor Yellow
            $publishParams | Out-String | Write-Host
            
            Publish-Module @publishParams
            
            Write-Host "Successfully published prerelease version: ${{ steps.version.outputs.PRERELEASE_VERSION }}" -ForegroundColor Green
            
          } catch {
            Write-Error "Failed to publish module: $($_.Exception.Message)"
            Write-Host "Error details: $($_.Exception)" -ForegroundColor Red
            throw
          }

      - name: üìù Create Release Notes
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.PRERELEASE_VERSION }}"
          $releaseNotes = @"
          # PSPreworkout $version (Prerelease)
          
          This is a prerelease version of PSPreworkout automatically published from the prerelease branch.
          
          **Version**: $version
          **Branch**: prerelease
          **Commit**: ${{ github.sha }}
          
          ## Installation
          
          To install this prerelease version:
          ``````powershell
          Install-Module -Name PSPreworkout -AllowPrerelease -Force
          ``````
          
          ## Notes
          
          - This is a prerelease version and may contain experimental features
          - Use at your own risk in production environments
          - Feedback and bug reports are welcome
          
          "@
          
          Write-Host "Release notes created for version $version" -ForegroundColor Green
