<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="190" errors="0" failures="1" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2025-09-15" time="06:17:36">
  <environment clr-version="9.0.8" nunit-version="2.5.8.0" machine-name="T14" cwd="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit" platform="Microsoft Windows 11 Enterprise|C:\WINDOWS|\Device\Harddisk0\Partition3" os-version="10.0.26120" user="SamErde" user-domain="AzureAD" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="23.2435" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\ExportedFunctions.Tests.ps1" executed="True" result="Success" success="True" time="2.1467" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\ExportedFunctions.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PSPreworkout" executed="True" result="Success" success="True" time="1.6025" asserts="0" description="PSPreworkout">
            <results>
              <test-suite type="TestFixture" name="PSPreworkout.Exported Commands" executed="True" result="Success" success="True" time="0.1925" asserts="0" description="PSPreworkout.Exported Commands">
                <results>
                  <test-suite type="TestFixture" name="PSPreworkout.Exported Commands.Number of commands" executed="True" result="Success" success="True" time="0.0184" asserts="0" description="PSPreworkout.Exported Commands.Number of commands">
                    <results>
                      <test-case description="Exports the same number of public functions as what is listed in the Module Manifest" name="PSPreworkout.Exported Commands.Number of commands.Exports the same number of public functions as what is listed in the Module Manifest" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Exported Commands.Explicitly exported commands" executed="True" result="Success" success="True" time="0.1881" asserts="0" description="PSPreworkout.Exported Commands.Explicitly exported commands">
                    <results>
                      <test-suite type="ParameterizedTest" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes &lt;_&gt; in the Module Manifest ExportedFunctions" executed="True" result="Success" success="True" time="0.1596" asserts="0" description="Includes &lt;_&gt; in the Module Manifest ExportedFunctions">
                        <results>
                          <test-case description="Includes Edit-HistoryFile in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Edit-HistoryFile in the Module Manifest ExportedFunctions" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-Assembly in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-Assembly in the Module Manifest ExportedFunctions" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-PSPortable in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-PSPortable in the Module Manifest ExportedFunctions" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Init-PSEnvConfig in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Init-PSEnvConfig in the Module Manifest ExportedFunctions" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes New-Script in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes New-Script in the Module Manifest ExportedFunctions" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Show-LoadedAssemblies in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Show-LoadedAssemblies in the Module Manifest ExportedFunctions" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Edit-PSReadLineHistoryFile in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Edit-PSReadLineHistoryFile in the Module Manifest ExportedFunctions" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Edit-WingetSettingsFile in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Edit-WingetSettingsFile in the Module Manifest ExportedFunctions" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-CommandHistory in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-CommandHistory in the Module Manifest ExportedFunctions" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-EnvironmentVariable in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-EnvironmentVariable in the Module Manifest ExportedFunctions" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-HashtableValueType in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-HashtableValueType in the Module Manifest ExportedFunctions" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-LoadedAssembly in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-LoadedAssembly in the Module Manifest ExportedFunctions" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-ModulesWithUpdate in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-ModulesWithUpdate in the Module Manifest ExportedFunctions" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-PowerShellPortable in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-PowerShellPortable in the Module Manifest ExportedFunctions" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Get-TypeAccelerator in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Get-TypeAccelerator in the Module Manifest ExportedFunctions" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Initialize-PSEnvironmentConfiguration in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Initialize-PSEnvironmentConfiguration in the Module Manifest ExportedFunctions" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Install-CommandNotFoundUtility in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Install-CommandNotFoundUtility in the Module Manifest ExportedFunctions" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Install-OhMyPosh in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Install-OhMyPosh in the Module Manifest ExportedFunctions" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Install-PowerShellISE in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Install-PowerShellISE in the Module Manifest ExportedFunctions" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Install-WinGet in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Install-WinGet in the Module Manifest ExportedFunctions" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes New-ScriptFromTemplate in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes New-ScriptFromTemplate in the Module Manifest ExportedFunctions" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Out-JsonFile in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Out-JsonFile in the Module Manifest ExportedFunctions" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Set-ConsoleFont in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Set-ConsoleFont in the Module Manifest ExportedFunctions" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Set-DefaultTerminal in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Set-DefaultTerminal in the Module Manifest ExportedFunctions" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Set-EnvironmentVariable in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Set-EnvironmentVariable in the Module Manifest ExportedFunctions" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Show-LoadedAssembly in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Show-LoadedAssembly in the Module Manifest ExportedFunctions" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Show-WithoutEmptyProperty in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Show-WithoutEmptyProperty in the Module Manifest ExportedFunctions" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Test-IsElevated in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Test-IsElevated in the Module Manifest ExportedFunctions" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Includes Update-AllTheThings in the Module Manifest ExportedFunctions" name="PSPreworkout.Exported Commands.Explicitly exported commands.Includes Update-AllTheThings in the Module Manifest ExportedFunctions" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PSPreworkout.Command Help" executed="True" result="Success" success="True" time="1.5975" asserts="0" description="PSPreworkout.Command Help">
                <results>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Edit-HistoryFile" executed="True" result="Success" success="True" time="0.0301" asserts="0" description="PSPreworkout.Command Help.Edit-HistoryFile">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Edit-HistoryFile.Includes a Synopsis" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Edit-HistoryFile.Includes a Description" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Edit-HistoryFile.Includes an Example" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-Assembly" executed="True" result="Success" success="True" time="0.0596" asserts="0" description="PSPreworkout.Command Help.Get-Assembly">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-Assembly.Includes a Synopsis" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-Assembly.Includes a Description" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-Assembly.Includes an Example" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-PSPortable" executed="True" result="Success" success="True" time="0.0851" asserts="0" description="PSPreworkout.Command Help.Get-PSPortable">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-PSPortable.Includes a Synopsis" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-PSPortable.Includes a Description" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-PSPortable.Includes an Example" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Init-PSEnvConfig" executed="True" result="Success" success="True" time="0.1222" asserts="0" description="PSPreworkout.Command Help.Init-PSEnvConfig">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Init-PSEnvConfig.Includes a Synopsis" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Init-PSEnvConfig.Includes a Description" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Init-PSEnvConfig.Includes an Example" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.New-Script" executed="True" result="Success" success="True" time="0.1508" asserts="0" description="PSPreworkout.Command Help.New-Script">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.New-Script.Includes a Synopsis" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.New-Script.Includes a Description" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.New-Script.Includes an Example" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Show-LoadedAssemblies" executed="True" result="Success" success="True" time="0.1829" asserts="0" description="PSPreworkout.Command Help.Show-LoadedAssemblies">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Show-LoadedAssemblies.Includes a Synopsis" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Show-LoadedAssemblies.Includes a Description" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Show-LoadedAssemblies.Includes an Example" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Edit-PSReadLineHistoryFile" executed="True" result="Success" success="True" time="0.2429" asserts="0" description="PSPreworkout.Command Help.Edit-PSReadLineHistoryFile">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Edit-PSReadLineHistoryFile.Includes a Synopsis" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Edit-PSReadLineHistoryFile.Includes a Description" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Edit-PSReadLineHistoryFile.Includes an Example" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Edit-WingetSettingsFile" executed="True" result="Success" success="True" time="0.2981" asserts="0" description="PSPreworkout.Command Help.Edit-WingetSettingsFile">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Edit-WingetSettingsFile.Includes a Synopsis" time="0.0166" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Edit-WingetSettingsFile.Includes a Description" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Edit-WingetSettingsFile.Includes an Example" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-CommandHistory" executed="True" result="Success" success="True" time="0.3575" asserts="0" description="PSPreworkout.Command Help.Get-CommandHistory">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-CommandHistory.Includes a Synopsis" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-CommandHistory.Includes a Description" time="0.0199" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-CommandHistory.Includes an Example" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-EnvironmentVariable" executed="True" result="Success" success="True" time="0.4094" asserts="0" description="PSPreworkout.Command Help.Get-EnvironmentVariable">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-EnvironmentVariable.Includes a Synopsis" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-EnvironmentVariable.Includes a Description" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-EnvironmentVariable.Includes an Example" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-HashtableValueType" executed="True" result="Success" success="True" time="0.4662" asserts="0" description="PSPreworkout.Command Help.Get-HashtableValueType">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-HashtableValueType.Includes a Synopsis" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-HashtableValueType.Includes a Description" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-HashtableValueType.Includes an Example" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-LoadedAssembly" executed="True" result="Success" success="True" time="0.5179" asserts="0" description="PSPreworkout.Command Help.Get-LoadedAssembly">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-LoadedAssembly.Includes a Synopsis" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-LoadedAssembly.Includes a Description" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-LoadedAssembly.Includes an Example" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-ModulesWithUpdate" executed="True" result="Success" success="True" time="0.5752" asserts="0" description="PSPreworkout.Command Help.Get-ModulesWithUpdate">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-ModulesWithUpdate.Includes a Synopsis" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-ModulesWithUpdate.Includes a Description" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-ModulesWithUpdate.Includes an Example" time="0.0192" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-PowerShellPortable" executed="True" result="Success" success="True" time="0.625" asserts="0" description="PSPreworkout.Command Help.Get-PowerShellPortable">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-PowerShellPortable.Includes a Synopsis" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-PowerShellPortable.Includes a Description" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-PowerShellPortable.Includes an Example" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Get-TypeAccelerator" executed="True" result="Success" success="True" time="0.6742" asserts="0" description="PSPreworkout.Command Help.Get-TypeAccelerator">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Get-TypeAccelerator.Includes a Synopsis" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Get-TypeAccelerator.Includes a Description" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Get-TypeAccelerator.Includes an Example" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Initialize-PSEnvironmentConfiguration" executed="True" result="Success" success="True" time="0.735" asserts="0" description="PSPreworkout.Command Help.Initialize-PSEnvironmentConfiguration">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Initialize-PSEnvironmentConfiguration.Includes a Synopsis" time="0.0235" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Initialize-PSEnvironmentConfiguration.Includes a Description" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Initialize-PSEnvironmentConfiguration.Includes an Example" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Install-CommandNotFoundUtility" executed="True" result="Success" success="True" time="0.7832" asserts="0" description="PSPreworkout.Command Help.Install-CommandNotFoundUtility">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Install-CommandNotFoundUtility.Includes a Synopsis" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Install-CommandNotFoundUtility.Includes a Description" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Install-CommandNotFoundUtility.Includes an Example" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Install-OhMyPosh" executed="True" result="Success" success="True" time="0.8386" asserts="0" description="PSPreworkout.Command Help.Install-OhMyPosh">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Install-OhMyPosh.Includes a Synopsis" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Install-OhMyPosh.Includes a Description" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Install-OhMyPosh.Includes an Example" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Install-PowerShellISE" executed="True" result="Success" success="True" time="0.8869" asserts="0" description="PSPreworkout.Command Help.Install-PowerShellISE">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Install-PowerShellISE.Includes a Synopsis" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Install-PowerShellISE.Includes a Description" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Install-PowerShellISE.Includes an Example" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Install-WinGet" executed="True" result="Success" success="True" time="0.9394" asserts="0" description="PSPreworkout.Command Help.Install-WinGet">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Install-WinGet.Includes a Synopsis" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Install-WinGet.Includes a Description" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Install-WinGet.Includes an Example" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.New-ScriptFromTemplate" executed="True" result="Success" success="True" time="0.9903" asserts="0" description="PSPreworkout.Command Help.New-ScriptFromTemplate">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.New-ScriptFromTemplate.Includes a Synopsis" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.New-ScriptFromTemplate.Includes a Description" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.New-ScriptFromTemplate.Includes an Example" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Out-JsonFile" executed="True" result="Success" success="True" time="1.0417" asserts="0" description="PSPreworkout.Command Help.Out-JsonFile">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Out-JsonFile.Includes a Synopsis" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Out-JsonFile.Includes a Description" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Out-JsonFile.Includes an Example" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Set-ConsoleFont" executed="True" result="Success" success="True" time="1.0915" asserts="0" description="PSPreworkout.Command Help.Set-ConsoleFont">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Set-ConsoleFont.Includes a Synopsis" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Set-ConsoleFont.Includes a Description" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Set-ConsoleFont.Includes an Example" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Set-DefaultTerminal" executed="True" result="Success" success="True" time="1.1415" asserts="0" description="PSPreworkout.Command Help.Set-DefaultTerminal">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Set-DefaultTerminal.Includes a Synopsis" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Set-DefaultTerminal.Includes a Description" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Set-DefaultTerminal.Includes an Example" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Set-EnvironmentVariable" executed="True" result="Success" success="True" time="1.198" asserts="0" description="PSPreworkout.Command Help.Set-EnvironmentVariable">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Set-EnvironmentVariable.Includes a Synopsis" time="0.0225" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Set-EnvironmentVariable.Includes a Description" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Set-EnvironmentVariable.Includes an Example" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Show-LoadedAssembly" executed="True" result="Success" success="True" time="1.2454" asserts="0" description="PSPreworkout.Command Help.Show-LoadedAssembly">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Show-LoadedAssembly.Includes a Synopsis" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Show-LoadedAssembly.Includes a Description" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Show-LoadedAssembly.Includes an Example" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Show-WithoutEmptyProperty" executed="True" result="Success" success="True" time="1.2933" asserts="0" description="PSPreworkout.Command Help.Show-WithoutEmptyProperty">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Show-WithoutEmptyProperty.Includes a Synopsis" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Show-WithoutEmptyProperty.Includes a Description" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Show-WithoutEmptyProperty.Includes an Example" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Test-IsElevated" executed="True" result="Success" success="True" time="1.3424" asserts="0" description="PSPreworkout.Command Help.Test-IsElevated">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Test-IsElevated.Includes a Synopsis" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Test-IsElevated.Includes a Description" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Test-IsElevated.Includes an Example" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PSPreworkout.Command Help.Update-AllTheThings" executed="True" result="Success" success="True" time="1.3983" asserts="0" description="PSPreworkout.Command Help.Update-AllTheThings">
                    <results>
                      <test-case description="Includes a Synopsis" name="PSPreworkout.Command Help.Update-AllTheThings.Includes a Synopsis" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes a Description" name="PSPreworkout.Command Help.Update-AllTheThings.Includes a Description" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Includes an Example" name="PSPreworkout.Command Help.Update-AllTheThings.Includes an Example" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-EnvironmentVariable.Tests.ps1" executed="True" result="Failure" success="False" time="10.1946" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-EnvironmentVariable.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-EnvironmentVariable" executed="True" result="Failure" success="False" time="10.1446" asserts="0" description="Get-EnvironmentVariable">
            <results>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Parameter Validation" executed="True" result="Success" success="True" time="0.0454" asserts="0" description="Get-EnvironmentVariable.Parameter Validation">
                <results>
                  <test-case description="Should have the correct parameter sets" name="Get-EnvironmentVariable.Parameter Validation.Should have the correct parameter sets" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the correct alias" name="Get-EnvironmentVariable.Parameter Validation.Should have the correct alias" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should validate that Name parameter is not null or empty" name="Get-EnvironmentVariable.Parameter Validation.Should validate that Name parameter is not null or empty" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should validate that Pattern parameter is not null or empty" name="Get-EnvironmentVariable.Parameter Validation.Should validate that Pattern parameter is not null or empty" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Default Behavior (No Parameters)" executed="True" result="Success" success="True" time="1.3357" asserts="0" description="Get-EnvironmentVariable.Default Behavior (No Parameters)">
                <results>
                  <test-case description="Should return all environment variables from all targets when no parameters are specified" name="Get-EnvironmentVariable.Default Behavior (No Parameters).Should return all environment variables from all targets when no parameters are specified" time="0.5681" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return objects with the correct PSTypeName" name="Get-EnvironmentVariable.Default Behavior (No Parameters).Should return objects with the correct PSTypeName" time="0.3763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return objects with expected properties" name="Get-EnvironmentVariable.Default Behavior (No Parameters).Should return objects with expected properties" time="0.3393" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Name Parameter Tests" executed="True" result="Success" success="True" time="3.0461" asserts="0" description="Get-EnvironmentVariable.Name Parameter Tests">
                <results>
                  <test-case description="Should return the correct environment variable when Name is specified" name="Get-EnvironmentVariable.Name Parameter Tests.Should return the correct environment variable when Name is specified" time="0.3208" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return environment variable from specific target when Name and Target are specified" name="Get-EnvironmentVariable.Name Parameter Tests.Should return environment variable from specific target when Name and Target are specified" time="0.3541" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return environment variables from multiple targets when Name and multiple Targets are specified" name="Get-EnvironmentVariable.Name Parameter Tests.Should return environment variables from multiple targets when Name and multiple Targets are specified" time="0.348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should ignore -All switch when Name is specified with Target" name="Get-EnvironmentVariable.Name Parameter Tests.Should ignore -All switch when Name is specified with Target" time="0.3245" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return empty result for non-existent environment variable" name="Get-EnvironmentVariable.Name Parameter Tests.Should return empty result for non-existent environment variable" time="0.3566" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Pattern Parameter Tests" executed="True" result="Success" success="True" time="4.7954" asserts="0" description="Get-EnvironmentVariable.Pattern Parameter Tests">
                <results>
                  <test-case description="Should return environment variables matching regex pattern" name="Get-EnvironmentVariable.Pattern Parameter Tests.Should return environment variables matching regex pattern" time="0.3818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return pattern matches from specific target" name="Get-EnvironmentVariable.Pattern Parameter Tests.Should return pattern matches from specific target" time="0.3215" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return pattern matches from multiple targets" name="Get-EnvironmentVariable.Pattern Parameter Tests.Should return pattern matches from multiple targets" time="0.345" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should ignore -All switch when Pattern is specified with Target" name="Get-EnvironmentVariable.Pattern Parameter Tests.Should ignore -All switch when Pattern is specified with Target" time="0.3566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return empty result for pattern with no matches" name="Get-EnvironmentVariable.Pattern Parameter Tests.Should return empty result for pattern with no matches" time="0.3379" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Target Parameter Tests" executed="True" result="Success" success="True" time="5.9008" asserts="0" description="Get-EnvironmentVariable.Target Parameter Tests">
                <results>
                  <test-case description="Should return environment variables from specific target" name="Get-EnvironmentVariable.Target Parameter Tests.Should return environment variables from specific target" time="0.4129" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return environment variables from multiple specified targets" name="Get-EnvironmentVariable.Target Parameter Tests.Should return environment variables from multiple specified targets" time="0.3444" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return environment variables from all targets when Target includes all three" name="Get-EnvironmentVariable.Target Parameter Tests.Should return environment variables from all targets when Target includes all three" time="0.3438" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Target and All Parameter Tests" executed="True" result="Success" success="True" time="6.6601" asserts="0" description="Get-EnvironmentVariable.Target and All Parameter Tests">
                <results>
                  <test-case description="Should return all environment variables from specific target when Target and All are specified" name="Get-EnvironmentVariable.Target and All Parameter Tests.Should return all environment variables from specific target when Target and All are specified" time="0.4015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return all environment variables from multiple targets when Target and All are specified" name="Get-EnvironmentVariable.Target and All Parameter Tests.Should return all environment variables from multiple targets when Target and All are specified" time="0.3514" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Process-Specific Properties" executed="True" result="Success" success="True" time="7.347" asserts="0" description="Get-EnvironmentVariable.Process-Specific Properties">
                <results>
                  <test-case description="Should include PID and ProcessName for Process target environment variables" name="Get-EnvironmentVariable.Process-Specific Properties.Should include PID and ProcessName for Process target environment variables" time="0.3684" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have null PID and ProcessName for non-Process targets" name="Get-EnvironmentVariable.Process-Specific Properties.Should have null PID and ProcessName for non-Process targets" time="0.3133" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Edge Cases and Error Handling" executed="True" result="Success" success="True" time="9.0275" asserts="0" description="Get-EnvironmentVariable.Edge Cases and Error Handling">
                <results>
                  <test-case description="Should handle case-insensitive environment variable names on Windows" name="Get-EnvironmentVariable.Edge Cases and Error Handling.Should handle case-insensitive environment variable names on Windows" time="0.3397" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle regex special characters in Name parameter by escaping them" name="Get-EnvironmentVariable.Edge Cases and Error Handling.Should handle regex special characters in Name parameter by escaping them" time="0.6836" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle invalid regex patterns by throwing an appropriate error" name="Get-EnvironmentVariable.Edge Cases and Error Handling.Should handle invalid regex patterns by throwing an appropriate error" time="0.3405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle valid but complex regex patterns" name="Get-EnvironmentVariable.Edge Cases and Error Handling.Should handle valid but complex regex patterns" time="0.312" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Output Format and Type" executed="True" result="Success" success="True" time="9.769" asserts="0" description="Get-EnvironmentVariable.Output Format and Type">
                <results>
                  <test-case description="Should return objects of type PSObject" name="Get-EnvironmentVariable.Output Format and Type.Should return objects of type PSObject" time="0.3795" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a collection that can be filtered and sorted" name="Get-EnvironmentVariable.Output Format and Type.Should return a collection that can be filtered and sorted" time="0.3571" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.Verbose Output" executed="True" result="Failure" success="False" time="10.1406" asserts="0" description="Get-EnvironmentVariable.Verbose Output">
                <results>
                  <test-case description="Should produce verbose output when -Verbose is specified" name="Get-EnvironmentVariable.Verbose Output.Should produce verbose output when -Verbose is specified" time="0.3671" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected regular expression 'Parameters:' to match 'Sending anonymous PowerShell and module version information to PostHog.', but it did not match.</message>
                      <stack-trace>at $VerboseMessages[0].Message | Should -Match 'Parameters:', C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-EnvironmentVariable.Tests.ps1:340
at &lt;ScriptBlock&gt;, C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-EnvironmentVariable.Tests.ps1:340</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-LoadedAssembly.Tests.ps1" executed="True" result="Success" success="True" time="0.383" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-LoadedAssembly.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-LoadedAssembly Tests" executed="True" result="Success" success="True" time="0.3457" asserts="0" description="Get-LoadedAssembly Tests">
            <results>
              <test-suite type="TestFixture" name="Get-LoadedAssembly Tests.Function Tests" executed="True" result="Success" success="True" time="0.3376" asserts="0" description="Get-LoadedAssembly Tests.Function Tests">
                <results>
                  <test-case description="Function should exist" name="Get-LoadedAssembly Tests.Function Tests.Function should exist" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should have correct alias" name="Get-LoadedAssembly Tests.Function Tests.Function should have correct alias" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should have valid HelpUri" name="Get-LoadedAssembly Tests.Function Tests.Function should have valid HelpUri" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should return non-empty output" name="Get-LoadedAssembly Tests.Function Tests.Function should return non-empty output" time="0.3128" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-ModulesWithUpdate.Tests.ps1" executed="True" result="Success" success="True" time="8.4556" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-ModulesWithUpdate.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ModulesWithUpdate" executed="True" result="Success" success="True" time="8.0223" asserts="0" description="Get-ModulesWithUpdate">
            <results>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Basic Functionality" executed="True" result="Success" success="True" time="2.5862" asserts="0" description="Get-ModulesWithUpdate.Basic Functionality">
                <results>
                  <test-case description="Should return modules with updates available" name="Get-ModulesWithUpdate.Basic Functionality.Should return modules with updates available" time="0.8575" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle prerelease modules correctly" name="Get-ModulesWithUpdate.Basic Functionality.Should handle prerelease modules correctly" time="0.5406" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return custom PSPreworkout.ModuleInfo objects" name="Get-ModulesWithUpdate.Basic Functionality.Should return custom PSPreworkout.ModuleInfo objects" time="0.4121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should include all required properties" name="Get-ModulesWithUpdate.Basic Functionality.Should include all required properties" time="0.3765" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should include prerelease status properties" name="Get-ModulesWithUpdate.Basic Functionality.Should include prerelease status properties" time="0.3839" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Version Normalization" executed="True" result="Success" success="True" time="3.9662" asserts="0" description="Get-ModulesWithUpdate.Version Normalization">
                <results>
                  <test-case description="Should normalize 3-part versions correctly" name="Get-ModulesWithUpdate.Version Normalization.Should normalize 3-part versions correctly" time="0.3817" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should normalize 4-part versions correctly" name="Get-ModulesWithUpdate.Version Normalization.Should normalize 4-part versions correctly" time="0.4377" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle versions with Build/Revision of -1" name="Get-ModulesWithUpdate.Version Normalization.Should handle versions with Build/Revision of -1" time="0.5427" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Prerelease Detection" executed="True" result="Success" success="True" time="4.8674" asserts="0" description="Get-ModulesWithUpdate.Prerelease Detection">
                <results>
                  <test-case description="Should detect prerelease from IsPrerelease property" name="Get-ModulesWithUpdate.Prerelease Detection.Should detect prerelease from IsPrerelease property" time="0.3631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle modules with unreliable IsPrerelease property" name="Get-ModulesWithUpdate.Prerelease Detection.Should handle modules with unreliable IsPrerelease property" time="0.5311" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Error Handling" executed="True" result="Success" success="True" time="5.8603" asserts="0" description="Get-ModulesWithUpdate.Error Handling">
                <results>
                  <test-case description="Should handle modules not found in repository" name="Get-ModulesWithUpdate.Error Handling.Should handle modules not found in repository" time="0.5307" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle version parsing errors gracefully" name="Get-ModulesWithUpdate.Error Handling.Should handle version parsing errors gracefully" time="0.4554" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Parameter Validation" executed="True" result="Success" success="True" time="7.135" asserts="0" description="Get-ModulesWithUpdate.Parameter Validation">
                <results>
                  <test-case description="Should accept wildcard patterns" name="Get-ModulesWithUpdate.Parameter Validation.Should accept wildcard patterns" time="0.4158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept multiple module names" name="Get-ModulesWithUpdate.Parameter Validation.Should accept multiple module names" time="0.4481" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should handle empty results gracefully" name="Get-ModulesWithUpdate.Parameter Validation.Should handle empty results gracefully" time="0.4059" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.PassThru Parameter" executed="True" result="Success" success="True" time="7.495" asserts="0" description="Get-ModulesWithUpdate.PassThru Parameter">
                <results>
                  <test-case description="Should return objects when PassThru is specified" name="Get-ModulesWithUpdate.PassThru Parameter.Should return objects when PassThru is specified" time="0.3553" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ModulesWithUpdate.Scope Priority Logic" executed="True" result="Success" success="True" time="8.0145" asserts="0" description="Get-ModulesWithUpdate.Scope Priority Logic">
                <results>
                  <test-case description="Should prioritize CurrentUser scope over AllUsers scope" name="Get-ModulesWithUpdate.Scope Priority Logic.Should prioritize CurrentUser scope over AllUsers scope" time="0.5141" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-PowerShellPortable.Tests.ps1" executed="True" result="Success" success="True" time="0.0737" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-PowerShellPortable.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-PowerShellPortable Tests" executed="True" result="Success" success="True" time="0.0329" asserts="0" description="Get-PowerShellPortable Tests">
            <results>
              <test-suite type="TestFixture" name="Get-PowerShellPortable Tests.Function Tests" executed="True" result="Success" success="True" time="0.0284" asserts="0" description="Get-PowerShellPortable Tests.Function Tests">
                <results>
                  <test-case description="Function should exist" name="Get-PowerShellPortable Tests.Function Tests.Function should exist" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should have valid HelpUri" name="Get-PowerShellPortable Tests.Function Tests.Function should have valid HelpUri" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should determine correct download URL for Windows" name="Get-PowerShellPortable Tests.Function Tests.Function should determine correct download URL for Windows" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should determine correct download URL for Linux" name="Get-PowerShellPortable Tests.Function Tests.Function should determine correct download URL for Linux" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should determine correct download URL for macOS" name="Get-PowerShellPortable Tests.Function Tests.Function should determine correct download URL for macOS" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-TypeAccelerator.Tests.ps1" executed="True" result="Success" success="True" time="1.733" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\Get-TypeAccelerator.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-TypeAccelerator Tests" executed="True" result="Success" success="True" time="1.7051" asserts="0" description="Get-TypeAccelerator Tests">
            <results>
              <test-suite type="TestFixture" name="Get-TypeAccelerator Tests.Function Tests" executed="True" result="Success" success="True" time="1.7013" asserts="0" description="Get-TypeAccelerator Tests.Function Tests">
                <results>
                  <test-case description="Function should exist" name="Get-TypeAccelerator Tests.Function Tests.Function should exist" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should have valid HelpUri" name="Get-TypeAccelerator Tests.Function Tests.Function should have valid HelpUri" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should return an object" name="Get-TypeAccelerator Tests.Function Tests.Function should return an object" time="0.4258" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should return non-empty output" name="Get-TypeAccelerator Tests.Function Tests.Function should return non-empty output" time="0.4841" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should filter by exact name" name="Get-TypeAccelerator Tests.Function Tests.Function should filter by exact name" time="0.3995" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Function should filter by wildcard name" name="Get-TypeAccelerator Tests.Function Tests.Function should filter by wildcard name" time="0.3736" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\PSPreworkout-Module.Tests.ps1" executed="True" result="Success" success="True" time="0.257" asserts="0" description="C:\Users\SamErde\Code\Personal\PSPreworkout\src\Tests\Unit\PSPreworkout-Module.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Module Tests" executed="True" result="Success" success="True" time="0.219" asserts="0" description="Module Tests">
            <results>
              <test-suite type="TestFixture" name="Module Tests.Module Tests" executed="True" result="Success" success="True" time="0.2099" asserts="0" description="Module Tests.Module Tests">
                <results>
                  <test-case description="Passes Test-ModuleManifest" name="Module Tests.Module Tests.Passes Test-ModuleManifest" time="0.1541" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="root module PSPreworkout.psm1 should exist" name="Module Tests.Module Tests.root module PSPreworkout.psm1 should exist" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="manifest should contain PSPreworkout.psm1" name="Module Tests.Module Tests.manifest should contain PSPreworkout.psm1" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a matching module name in the manifest" name="Module Tests.Module Tests.should have a matching module name in the manifest" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid description in the manifest" name="Module Tests.Module Tests.should have a valid description in the manifest" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid author in the manifest" name="Module Tests.Module Tests.should have a valid author in the manifest" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid version in the manifest" name="Module Tests.Module Tests.should have a valid version in the manifest" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid guid in the manifest" name="Module Tests.Module Tests.should have a valid guid in the manifest" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have any spaces in the tags" name="Module Tests.Module Tests.should not have any spaces in the tags" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid project Uri" name="Module Tests.Module Tests.should have a valid project Uri" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>